[
    {
        "grammar": "R1 = R2*;R2 = \"1\" ~ \"2\";",
        "entry": "R1",
        "tests": [
            {
                "I": "121",
                "E": "CutError: line 1:4, expect R2 (char '2')"
            }
        ]
    },
    {
        "grammar": "R1 = R2*;R2 = R12 / R21;R12 = \"1\" ~ \"2\";R21 = \"2\" ~ \"1\";",
        "entry": "R1",
        "tests": [
            {
                "I": "122",
                "E": "CutError: line 1:4, expect R21 (char '1')"
            }
        ]
    },
    {
        "grammar": "R1 = \"[\" !R21 [0-9]+ \"]\";R21 = \"2\" ~ \"1\";",
        "entry": "R1",
        "tests": [
            {
                "I": "[2]",
                "O": [
                    {
                        "slice": [
                            0,
                            3
                        ],
                        "type": "R1"
                    }
                ]
            }
        ]
    },
    {
        "grammar": "R1 = \"[\" R1_Inner \"]\";R1_Inner = !R21 [0-9]+;R21 = \"2\" ~ \"1\";",
        "entry": "R1",
        "tests": [
            {
                "I": "[21]",
                "E": "MatchError: line 1:2, expect R1_Inner"
            }
        ]
    },
    {
        "grammar": "R1 = \"[\" ~ R1_Inner+ \"]\";R1_Inner = \"1\" / \"2\";",
        "entry": "R1",
        "tests": [
            {
                "I": "[1]",
                "O": [
                    {
                        "slice": [
                            0,
                            3
                        ],
                        "type": "R1",
                        "children": [
                            {
                                "slice": [
                                    1,
                                    2
                                ],
                                "type": "R1_Inner"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "grammar": "R1 = \"[\" ~ (RB / RP) . \"]\";RB = \"{\" ~ \"}\";RP = \"(\" \")\";",
        "entry": "R1",
        "tests": [
            {
                "I": "[{]",
                "E": "CutError: line 1:3, expect RB (char '}')"
            }
        ]
    },
    {
        "grammar": "R1 = \"[\" ~ (RB / RP) . \"]\";RB = \"{\" ~ \"}\";RP = \"(\" \")\";",
        "entry": "R1",
        "tests": [
            {
                "I": "[{}.]",
                "O": [
                    {
                        "slice": [
                            0,
                            5
                        ],
                        "type": "R1",
                        "children": [
                            {
                                "slice": [
                                    1,
                                    3
                                ],
                                "type": "RB"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "grammar": "R1 = \"[\" ~ (RB / RP) (!\"]\" .) \"]\";RB = \"{\" ~ \"}\";RP = \"(\" \")\";",
        "entry": "R1",
        "tests": [
            {
                "I": "[()]",
                "E": "CutError: line 1:4, expect R1"
            }
        ]
    },
    {
        "grammar": "R1 = \"[\" ~ (RB / RP) (!\"]\" .) \"]\";RB = \"{\" ~ \"}\";RP = \"(\" \")\";",
        "entry": "R1",
        "tests": [
            {
                "I": "[()A]",
                "O": [
                    {
                        "slice": [
                            0,
                            5
                        ],
                        "type": "R1",
                        "children": [
                            {
                                "slice": [
                                    1,
                                    3
                                ],
                                "type": "RP"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "grammar": "R1 = &(\"a\" ~ \"b\") [a-z]{3};",
        "entry": "R1",
        "tests": [
            {
                "I": "zzz",
                "E": "MatchError: line 1:1, expect R1 (char 'a')"
            }
        ]
    },
    {
        "grammar": "R1 = &(\"a\" ~ \"b\") [a-z]{3};",
        "entry": "R1",
        "tests": [
            {
                "I": "abz",
                "O": [
                    {
                        "slice": [
                            0,
                            3
                        ],
                        "type": "R1"
                    }
                ]
            }
        ]
    },
    {
        "grammar": "R1 = !(\"a\" ~ \"b\") [a-z]{3};",
        "entry": "R1",
        "tests": [
            {
                "I": "abz",
                "E": "MatchError: line 1:1, expect R1"
            }
        ]
    }
]
